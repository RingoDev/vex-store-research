import requests
import csv

# Define file paths
input_csv = "output/cleaned_cves.csv"  # Change if needed
output_csv = "output/cve_descriptions.csv"
osv_api_url = "https://api.osv.dev/v1/vulns/"

def fetch_cve_description(cve_id, cache):
    """Fetches vulnerability details from the OSV API, avoiding duplicate calls."""
    if cve_id in cache:
        return cache[cve_id]

    response = requests.get(osv_api_url + cve_id)
    if response.status_code == 200:
        data = response.json()
        description = data.get("details", "No summary available")
    else:
        print(f"Warning: Failed to fetch data for {cve_id}")
        description = "No summary available"

    cache[cve_id] = description  # Store in cache
    print(f"Fetched: {cve_id} - {description}")
    return description

if __name__ == "__main__":
    # Read input CSV
    with open(input_csv, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)

        cve_data = []
        cve_cache = {}  # Cache to avoid duplicate API calls

        for row in reader:
            cve_id = row.get("CVE(s)", "")
            if cve_id:
                description = fetch_cve_description(cve_id, cve_cache)
                cve_data.append({"CVE": cve_id, "Description": description})

    # Write new CSV with only CVE and descriptions
    with open(output_csv, mode='w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ["CVE", "Description"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(cve_data)

    print(f"CSV with CVE descriptions saved as: {output_csv}")
