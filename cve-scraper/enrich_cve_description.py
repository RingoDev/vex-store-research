import csv

def load_cve_descriptions(description_file):
    """Load CVE descriptions into a dictionary."""
    cve_dict = {}
    with open(description_file, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            cve_id = row.get("CVE", "").strip()
            description = row.get("Description", "").strip()
            if cve_id:
                cve_dict[cve_id] = description
    return cve_dict

def merge_csv(status_file, cve_dict, output_file):
    """Merge CVE descriptions into the status justification file."""
    with open(status_file, mode='r', encoding='utf-8') as infile, \
            open(output_file, mode='w', encoding='utf-8', newline='') as outfile:

        reader = csv.DictReader(infile)
        fieldnames = reader.fieldnames + ["Vulnerability Description"] if "Vulnerability Description" not in reader.fieldnames else reader.fieldnames
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()

        for row in reader:
            cve_id = row.get("Vulnerability Identifier", "").strip()  # FIXED COLUMN NAME
            if cve_id in cve_dict:
                row["Vulnerability Description"] = cve_dict[cve_id]
            else:
                row["Vulnerability Description"] = ""
                print(f"Missing description for {cve_id}")
            writer.writerow(row)

def main():
    description_file = "output/cve_descriptions.csv"
    status_file = "output/with_status_justification.csv"
    output_file = "output/merged_output.csv"

    cve_dict = load_cve_descriptions(description_file)
    merge_csv(status_file, cve_dict, output_file)
    print(f"Merging complete. Output saved to {output_file}.")

if __name__ == "__main__":
    main()
