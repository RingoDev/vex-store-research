import pandas as pd
import re

def clean_cve_identifier(cve):
    """Removes invalid characters from the CVE identifier, allowing only letters, numbers, and hyphens."""
    return re.sub(r'[^a-zA-Z0-9-]', '', cve) if isinstance(cve, str) else cve

def split_cve_column(input_csv, output_csv):
    """
    Reads a CSV file, splits the CVE(s) column so that each row contains only one CVE,
    ensures CVE identifiers contain only valid characters, filters out missing CVE values,
    filters out identifiers starting with 'BDSA', and writes the structured data to a new CSV file.
    """
    try:
        df = pd.read_csv(input_csv, header=0, dtype=str)

        if "CVE(s)" in df.columns:
            # split on whitespace or /
            df_exploded = df.assign(CVE=df["CVE(s)"].str.split(r'\s|/')).explode("CVE")

            # Clean the CVE identifiers
            df_exploded["CVE"] = df_exploded["CVE"].apply(clean_cve_identifier)

            # Filter out rows where CVE is missing or starts with 'BDSA'
            df_exploded = df_exploded.dropna(subset=["CVE"])
            df_exploded = df_exploded[df_exploded["CVE"].str.strip() != ""]
            df_exploded = df_exploded[~df_exploded["CVE"].str.startswith("BDSA")]

            # Rename column to 'Vulnerability Identifier'
            df_exploded = df_exploded.rename(columns={"CVE": "Vulnerability Identifier"})

            # Drop the original 'CVE(s)' column
            df_exploded = df_exploded.drop(columns=["CVE(s)"])

            df_exploded.to_csv(output_csv, index=False)
            print(f"\nCleaned and structured data has been saved to '{output_csv}'.")
        else:
            print("Error: CSV file is missing the required 'CVE(s)' column. Please check the file structure.")

    except FileNotFoundError:
        print(f"Error: File '{input_csv}' not found.")
    except Exception as e:
        print(f"Error processing the file: {e}")

def main():
    input_csv = "output/cleaned_products_with_purl_cpe.csv"
    output_csv = "output/cleaned_cves.csv"
    split_cve_column(input_csv, output_csv)

if __name__ == "__main__":
    main()
