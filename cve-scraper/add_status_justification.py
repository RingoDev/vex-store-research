import csv

# Define file paths
input_csv = "output/with_vers.csv"
output_csv = "output/with_status_justification.csv"

# List of phrases indicating vulnerable code is not used
not_used_phrases = [
    "not use", "not stored", "applies to", "not running",
    "not creating", "doesn't use", "doesn't allow"
]

# Function to determine status and justification
def determine_status_and_justification(statement, vers):
    statement_lower = statement.lower()
    if "resolved" in statement_lower:
        status = "not_affected"
        justification = "component_not_present"
    elif any(phrase in statement_lower for phrase in not_used_phrases):
        status = "not_affected"
        justification = "vulnerable_code_not_in_execute_path"
    else:
        status = "not_affected"
        justification = "vulnerable_code_not_in_execute_path"
    # print(f"Statement: {statement} | Status: {status} | Justification: {justification}")
    return status, justification

if __name__ == "__main__":
    # Read input CSV and add the new columns
    with open(input_csv, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        fieldnames = reader.fieldnames + ["status", "justification"]  # Add new columns

        rows = []
        for row in reader:
            status, justification = determine_status_and_justification(row.get("Dynatrace statement", ""), row.get("vers", ""))
            row["status"] = status
            row["justification"] = justification
            rows.append(row)

    # Write updated CSV
    with open(output_csv, mode='w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

    print(f"Updated CSV saved as: {output_csv}")
