import pandas as pd

# Define mappings for product standardization
STANDARD_MAPPINGS = {
    "activegate container image": "ActiveGate",
    "activegate image": "ActiveGate",
    "activegate managed < 1.278": "ActiveGate, Managed",
    "activegate managed": "ActiveGate, Managed",
    "activegate activegate container image": "ActiveGate, ActiveGate Container Image",
    "activegate oneagent container image": "ActiveGate, OneAgent Container Image",
    "activegate saas": "ActiveGate, Saas",
    "oneagent container image": "OneAgent",
    "managed oneagent activegate": "Managed, OneAgent, ActiveGate",
    "saas managed activegate": "Saas, Managed, ActiveGate",
    "oneagent, oneagent container image": "OneAgent, OneAgent Container Image",
    "oneagent activegate managed": "OneAgent, ActiveGate, Managed",
    "oneagent activegate": "OneAgent, ActiveGate",
    "oneagent container image activegate container image": "OneAgent Container Image, ActiveGate Container Image",
    "operator version 0.10.1": "Operator",
    "operator version 0.13.0": "Operator",
    "synthetic adapter image": "Synthetic",
    "oneagent extension framework": "Extensions Framework",
    "oneagent extensions framework": "Extensions Framework",
    "remote plugin agent": "Remote Plugin Module",
    "dynatrace otel collector": "OTEL Collector",
    "managed activegate": "Managed, ActiveGate",
    "managed, activegate": "Managed, ActiveGate",
    "activegate (watchdog)": "ActiveGate",
    "activegate (windows auto-updater)": "ActiveGate",
    "activegate extension": "Extensions Framework",
    "oneagent extension, activegate extension": "Extensions Framework",
    "operator, oneagent container image": "Operator, OneAgent Container Image",
    "aws lambda layers in oneagent": "OneAgent Lambda Layers",
    "operator image": "Operator",
    "no dt component affected": "*",
    "dynatrace": "*",
    "dynatrace, managed": "*",
    "nan": "*",
    "activegate, synthetic": "ActiveGate, Synthetic",
    "saas, managed, activegate": "Saas, Managed, ActiveGate",
    "(python) lambda layer in oneagent": "OneAgent Lambda Layers",
    "oneagent": "OneAgent",
    "activegate": "ActiveGate",
    "dynatrace operator": "Operator",
    "rum js agent script": "JS Agent",
}

# Define valid products and their corresponding PURL and CPE mappings
PRODUCT_MAPPING = {
    "Managed": {
        "purl": "pkg:generic/dynatrace/dynatrace-managed",
        "cpe": "cpe:2.3:a:dynatrace:managed:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "ActiveGate": {
        "purl": "pkg:generic/dynatrace/dynatrace-activegate",
        "cpe": "cpe:2.3:a:dynatrace:activegate:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "Saas": {
        "purl": "pkg:generic/dynatrace/dynatrace-saas",
        "cpe": "cpe:2.3:a:dynatrace:saas:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "OneAgent": {
        "purl": "pkg:generic/dynatrace/dynatrace-oneagent",
        "cpe": "cpe:2.3:a:dynatrace:oneagent:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "Extensions Framework": {
        "purl": "pkg:generic/dynatrace/dynatrace-extensions-framework",
        "cpe": "cpe:2.3:a:dynatrace:extensions_framework:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "OTEL Collector": {
        "purl": "pkg:generic/dynatrace/dynatrace-otel-collector",
        "cpe": "cpe:2.3:a:dynatrace:otel_collector:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "Synthetic": {
        "purl": "pkg:generic/dynatrace/dynatrace-synthetic",
        "cpe": "cpe:2.3:a:dynatrace:synthetic:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "JS Agent": {
        "purl": "pkg:generic/dynatrace/oneagent-js",
        "cpe": "cpe:2.3:a:dynatrace:oneagent-js:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "OneAgent Lambda Layers": {
        "purl": "pkg:generic/dynatrace/oneagent-lambda",
        "cpe": "cpe:2.3:a:dynatrace:oneagent-lambda:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "Remote Plugin Module": {
        "purl": "pkg:generic/dynatrace/remote-plugin-module",
        "cpe": "cpe:2.3:a:dynatrace:remote-plugin-module:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "*": {
        "purl": "pkg:generic/dynatrace",
        "cpe": "cpe:2.3:a:dynatrace:*:*:*:*:*:*:*:*:*",
        "type": "software"
    },
    "ActiveGate Container Image": {
        "purl": "pkg:docker/dynatrace/dynatrace-activegate",
        "cpe": "cpe:2.3:a:dynatrace:activegate_container_image:*:*:*:*:*:*:*:*",
        "type": "container"
    },
    "OneAgent Container Image": {
        "purl": "pkg:docker/dynatrace/dynatrace-oneagent",
        "cpe": "cpe:2.3:a:dynatrace:oneagent_container_image:*:*:*:*:*:*:*:*",
        "type": "container"
    },
    "Operator": {
        "purl": "pkg:docker/dynatrace/dynatrace-operator",
        "cpe": "cpe:2.3:a:dynatrace:operator_container_image:*:*:*:*:*:*:*:*",
        "type": "container"
    }
}

def clean_product_name(product_name):
    """
    Cleans and standardizes product names. Splits multiple product names into separate items.
    """
    cleaned_products = set()
    warnings = []


    # Normalize case
    clean_name = str(product_name).strip().lower()

    # Apply standard mappings if available
    mapped_name = STANDARD_MAPPINGS.get(clean_name, clean_name.title())

    # Split values **only by commas** to keep meaningful names together
    split_products = [p.strip() for p in mapped_name.split(",")]

    # Store each split item separately
    for item in split_products:
        if item not in PRODUCT_MAPPING:
            warnings.append(f"Warning: '{item}' is not a recognized product.")
        else:
            cleaned_products.add(item)

    return sorted(cleaned_products), warnings


def process_csv(input_csv, output_csv):
    """
    Reads a CSV file, cleans the product names, adds purl and cpe columns, and writes to a new CSV.
    """
    try:
        df = pd.read_csv(input_csv, header=0, dtype=str)

        if all(col in df.columns for col in ["CVE(s)", "Affected library", "Dynatrace component", "Dynatrace statement"]):
            processed_rows = []

            for _, row in df.iterrows():
                cve = row["CVE(s)"]
                library = row["Affected library"]
                raw_product = row["Dynatrace component"]
                statement = row["Dynatrace statement"]

                cleaned_products, warnings = clean_product_name(raw_product)

                for product in cleaned_products:
                    product_info = PRODUCT_MAPPING.get(product, {
                        "purl": f"pkg:generic/unknown-product/{product.lower().replace(' ', '-')}",
                        "cpe": f"cpe:2.3:a:unknown_vendor:{product.lower().replace(' ', '_')}:*:*:*:*:*:*:*:*"
                    })

                    processed_rows.append([
                        cve, library, product, statement, product_info["purl"], product_info["cpe"]
                    ])

                for warning in warnings:
                    print(warning)

            cleaned_df = pd.DataFrame(processed_rows, columns=[
                "CVE(s)", "Affected library", "Dynatrace component", "Dynatrace statement", "purl", "cpe"
            ])

            cleaned_df.to_csv(output_csv, index=False)
            print(f"\nCleaned and structured data has been saved to '{output_csv}'.")

        else:
            print("Error: CSV file is missing required columns.")

    except FileNotFoundError:
        print(f"Error: File '{input_csv}' not found.")
    except Exception as e:
        print(f"Error processing the file: {e}")


if __name__ == "__main__":
    process_csv("output/scraped_assessments.csv", "output/cleaned_products_with_purl_cpe.csv")
